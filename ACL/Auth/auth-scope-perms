Laravel Passport – Working with Authentication, Scope, and Permission

Criar model Role e migration

php artisan make:model -m Role

Editar migration

public function up()
{
    Schema::create('roles', function (Blueprint $table) {
        $table->primary(['user_id', 'role']);
        $table->integer('user_id')->unsigned();
        $table->string('role');
    });
}
php artisan migrate

Editar 
app/User.php

E implementar o relacionamento OneToOne

public function role() {
    return $this->hasOne(Role::class);
}

Adicionar alguns registros

php artisan make:factory UserFactory
php artisan make:factory RoleFactory

UserFactory

$factory->define(User::class, function (Faker $faker) {
    return [
        'name' => $faker->name,
        'phone' => $faker->tollFreePhoneNumber,
        'email' => $faker->unique()->safeEmail,
        'email_verified_at' => now(),
        'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password
        'remember_token' => Str::random(10),
    ];
});

RoleFactory

$factory->define(Role::class, function (Faker $faker) {
    return [
        'role' => $faker->randomElement(['admin', 'moderator'])
    ];
});

php artisan make:seed UsersTableSeeder

Editar o seed e deixar:

    public function run()
    {
        factory(App\User::class, 3)->create()
        ->each(function($user) {
            $user->role()->save(factory(App\Role::class)->make());
        });
    }

Ajustar DatabaseSeeder

    public function run()
    {
        $this->call(UsersTableSeeder::class);
    }

php artisan db:seed

Criar Middleware para anexar Permissions como Scopo

O parâmetro scopo deve conter a role do usuário autenticado.

php artisan make:middleware CheckRole

<?php
namespace App\Http\Middleware;

use Closure;

class CheckRole
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle($request, Closure $next)
    {
        $userRole = $request->user()->role()->first();
        if ($userRole) {

            // Set scope as admin/moderator based on user role
            $request->request->add([
                'scope' => $userRole->role
            ]);
        }

        return $next($request);
    }
}

Agora adicionar nosso middleware CheckRole para o Kernel

app/Http/Kernel.php

protected $routeMiddleware = [
...
        'role' => \App\Http\Middleware\CheckRole::class,
    ];

Adicionar rota

routes/api.php

Route::post('login', 'AuthController@login');

Route::middleware(['auth:api', 'role'])->group(function() {
//    ....
  //  ....
    //....
});

Agora é o tempo de definir os Scopes na classe AuthServiceProvider. 

Instalar o passport

composer require laravel/passport

Editar o
app/Providers/AuthServiceProvider.php

public function boot()
{
    $this->registerPolicies();

    Passport::routes();

    // Mandatory to define Scope
    Passport::tokensCan([
        'admin' => 'Add/Edit/Delete Users',
        'moderator' => 'Add/Edit Users',
        'basic' => 'List Users'
    ]);

    Passport::setDefaultScope([
        'basic'
    ]);
}

Adicionar o Scope Middleware no Kernel.php

protected $routeMiddleware = [
...
'role' => \App\Http\Middleware\CheckRole::class,

Gerar Token de Autenticação comScope

Agora é hora de instalar o Passport Laravel. Olhando o método de login para gerar o token de acesso com escopo

Abra o AuthController.php e gere o token de acesso com scope

public function login(Request $request)
{
    $request->validate([
        'email' => 'required|email|exists:users,email',
        'password' => 'required'
    ]);

    if( Auth::attempt(['email'=>$request->email, 'password'=>$request->password]) ) {

        $user = Auth::user();
        $userRole = $user->role()->first();

        if ($userRole) {
            $this->scope = $userRole->role;
        }

        $token = $user->createToken($user->email.'-'.now(), [$this->scope]);

        return response()->json([
            'token' => $token->accessToken
        ]);
    }
}

Acessar a área desejada com token

Adicionar rotas com permissões específicas e testar se tudo funciona bem.

Adicionar rotas ao routes/api.php

Route::middleware(['auth:api', 'role'])->group(function() {

    // List users
    Route::middleware(['scope:admin,moderator,basic'])->get('/users', function (Request $request) {

        return User::get();
    });

    // Add/Edit User
    Route::middleware(['scope:admin,moderator'])->post('/user', function(Request $request) {

        return User::create($request->all());
    });

    Route::middleware(['scope:admin,moderator'])->put('/user/{userId}', function(Request $request, $userId) {

        try {
            $user = User::findOrFail($userId);
        } catch (ModelNotFoundException $e) {
            return response()->json([
                'message' => 'User not found.'
            ], 403);
        }

        $user->update($request->all());

        return response()->json(['message'=>'User updated successfully.']);
    });

    // Delete User
    Route::middleware(['scope:admin'])->delete('/user/{userId}', function(Request $request, $userId) {

        try {
            $user = User::findOfFail($userId);
        } catch (ModelNotFoundException $e) {
            return response()->json([
                'message' => 'User not found.'
            ], 403);
        }

        $user->delete();

        return response()->json(['message'=>'User deleted successfully.']);
    });
});

Criamos em api.php as rotas:

    • GET /users – List all the users
    • POST /user – Add new user
    • PUT /user/{userId} – Update existing user
    • DELETE /user/{userId} – Delete existing user

Todas estas rotas funcionam baseadas em roles que foram definids na seção role.
Vejamos as tabelas users e roles.

Usemos o Postman para testar as APIs criadas.

Efetuar uma atualização dos user com user com role basic

- Body
- x-www-form-unlercoded
- email
- password
- Body
- pretty
  token (anotar)

Atualizar informações do user com o endpoint PUT /user/{userId}

Headers:
- Content-type - application/x-www-form-unlercoded
- Accept - application/json
- Authorization - Bearer eYsd...

O user que tem role tipo basic não tem permissão de atualizar.Somente um moderator ou admin poderão atualizar.

Na rota
// admin and moderator can access this area
Route::middleware(['scope:admin,moderator']);

// Add/Edit User
Route::middleware(['scope:admin,moderator'])->post('/user', function(Request $request) {

    return User::create($request->all());
});

Route::middleware(['scope:admin,moderator'])->put('/user/{userId}', function(Request $request, $userId) {

    try {
        $user = User::findOrFail($userId);
    } catch (ModelNotFoundException $e) {
        return response()->json([
            'message' => 'User not found.'
        ], 403);
    }

    $user->update($request->all());

    return response()->json(['message'=>'User updated successfully.']);
});

Efetuar uma atualização dos user com user com role moderator ou admin
https://webomnizz.com/laravel-passport-working-with-authentication-scope-and-permission/


