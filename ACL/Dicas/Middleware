php artisan make:middleware RoleMiddleware

Adicionar o middleware ao Kernel e configurar

App\Http\Middleware\RoleMiddleware.php
namespace App\Http\Middleware;

use Closure;

class RoleMiddleware
{

    public function handle($request, Closure $next, $role, $permission = null)
    {
        if(!$request->user()->hasRole($role)) {
             abort(404);

        }

        if($permission !== null && !$request->user()->can($permission)) {
              abort(404);
        }

        return $next($request);

    }
}


App\Http\Kernel.php
protected $routeMiddleware = [
    .
    .
    'role' => \App\Http\Middleware\RoleMiddleware::class,
];


Agora nas rotas podemos fazer assim:

Route::group(['middleware' => 'role:developer'], function() {

   Route::get('/admin', function() {

      return 'Welcome Admin';
      
   });

});


Adicionando Middlewares para Roles e Permissões

Podemos criar roles para áreas específicas do aplicativo. Por exemplo, você pode fornecer acesso para gerenciar a seção do usuário apenas para gerentes de projeto. Para isso, usaremos o Laravel Middleware. Usando o middleware, podemos adicionar controle extra às solicitações recebidas no seu aplicativo.

Para criar um middleware para funções, execute o comando abaixo.

php artisan make:middleware RoleMiddleware

Abra o app/Http/Middleware/RoleMiddleware.php e deixe assim:

<?php
namespace App\Http\Middleware;

use Closure;

class RoleMiddleware
{
    /**
     * Handle an incoming request.
     * @param $request
     * @param Closure $next
     * @param $role
     * @param null $permission
     * @return mixed
     */
    public function handle($request, Closure $next, $role, $permission = null)
    {
        if(!auth()->user()->hasRole($role)) {
            abort(404);
        }
        if($permission !== null && !auth()->user()->can($permission)) {
            abort(404);
        }
        return $next($request);
    }
}

Neste middleware, estamos verificando se o usuário atual não possui a role/permissão especificada e, em seguida, retorne a página de erro 404. Existem muitas possibilidades de usar roles e permissões no middleware para controlar as solicitações recebidas, tudo depende dos requisitos do seu aplicativo.
Antes de usar este middleware, você deve adicioná-lo ao seu arquivo App\Http\Kernel.php.

protected $routeMiddleware = [
...
'role'  =>  \App\Http\Middleware\RoleMiddleware::class, // our role middleware
...

Agora podemos usar o middleware:

Route::group(['middleware' => 'role:project-manager'], function() {
   Route::get('/dashboard', function() {
      return 'Welcome Project Manager';
   });
});


Via Middleware

Laravel includes a middleware that can authorize actions before the incoming request even reaches your routes or controllers. By default, the Illuminate\Auth\Middleware\Authorize middleware is assigned the can key in your App\Http\Kernel class. Let's explore an example of using the can middleware to authorize that a user can update a blog post:

use App\Post;

Route::put('/post/{post}', function (Post $post) {
    // The current user may update the post...
})->middleware('can:update,post');

In this example, we're passing the can middleware two arguments. The first is the name of the action we wish to authorize and the second is the route parameter we wish to pass to the policy method. In this case, since we are using implicit model binding, a Post model will be passed to the policy method. If the user is not authorized to perform the given action, a HTTP response with a 403 status code will be generated by the middleware.
Actions That Don't Require Models

Again, some actions like create may not require a model instance. In these situations, you may pass a class name to the middleware. The class name will be used to determine which policy to use when authorizing the action:

Route::post('/post', function () {
    // The current user may create posts...
})->middleware('can:create,App\Post');



